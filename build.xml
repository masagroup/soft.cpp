<?xml version="1.0"?>
<project name="soft.cpp" default="all" xmlns:if="ant:if" xmlns:unless="ant:unless">

    <taskdef resource="net/sf/antcontrib/antlib.xml"/>

    <property file="${user.home}/build.properties"/>
    <property file="build.properties"/>
    
    <property name="aria2.SHA-512"  value="af965693edafe504595d2fd24f9b18ccdbbda53c1a8e9e454b12e01db26644097ee76dc27760c8c5dae100af2240eb37bffedfda0d6d9d3bc1373189cec40899"/>
    <property name="cmake.SHA-512"  value="466fa8fd6bfaea0e338627beb0d6583bd900f2720dcb2a5bc8099a465fbca9b44ec3350549d09128c582d0527ef461ba86cb6e8e47943056ac6f97d6fc605898"/>
    <property name="ninja.SHA-512"  value="56f3b94ed7f9e36446bb6fe2a786156befdde6b279ee6d9d7ebd8b6e5d6664cdfe1d526e158f68bfc5cf947bcf9360df8d1e1a8939b6db1b2f0658256a17d66b"/>
    
    <property name="ecore.version"  value="1.2.3"/>
    
    <macrodef name="property-to-location">
        <attribute name="name"/>
        <sequential>
            <echo taskname="property-to-location" level="debug" message="@{name} : ${@{name}}"/>
            <var name="tmp.dir" value="${@{name}}"/>
            <var name="@{name}" unset="true"/>
            <property name="@{name}" location="${tmp.dir}"/>
            <echo taskname="property-to-location" level="debug" message="    -> ${@{name}}"/>
        </sequential>
    </macrodef>

    <propertyselector property="dirs" match="\A.*\.dir\z" distinct="true"/>
    <for list="${dirs}" param="dir">
        <sequential>
            <property-to-location name="@{dir}"/>
        </sequential>
    </for>
    
    <macrodef name="download">
        <attribute name="url"/>
        <attribute name="dir" default="${downloads.dir}"/>
        <attribute name="output" default=""/>
        <element name="args" implicit="yes" optional="yes"/>
        <sequential>
            <mkdir dir="@{dir}"/>
            <!-- if output is undefined , output is the basename of the url -->
            <local name="output"/>
            <if>
                <equals arg1="@{output}" arg2=""/>
                <then>
                    <basename property="output" file="@{url}"/>
                </then>
                <else>
                    <property name="output" value="@{output}"/>
                </else>
            </if>
            <if>
                <available file="${bin.dir}/aria2/aria2c.exe"/>
                <then>
                    <exec taskname="download" executable="${bin.dir}/aria2/aria2c.exe" dir="${bin.dir}/aria2" failonerror="true">
                        <arg value="--continue=true"/>
                        <arg value="--allow-overwrite=true"/>
                        <arg value="--auto-file-renaming=false"/>
                        <arg value="--show-console-readout=false"/>
                        <arg value="--summary-interval=0"/>
                        <arg value="--dir"/>
                        <arg value="@{dir}"/>
                        <arg value="--out=${output}"/>
                        <args/>
                        <arg value="@{url}"/>
                    </exec>
                </then>
                <else>
                    <get src="@{url}"
                         dest="@{dir}/${output}"
                         verbose="true"
                         usetimestamp="true"/>
                </else>
            </if>
        </sequential>
    </macrodef>
    
    <macrodef name="install">
        <attribute name="name"/>
        <attribute name="url"/>
        <attribute name="output" default=""/>
        <attribute name="dir" default="${bin.dir}/@{name}"/>
        <element name="args" implicit="yes" optional="yes"/>
        <sequential>
            <!-- if output is undefined , output is the basename of the url -->
            <local name="output"/>
            <if>
                <equals arg1="@{output}" arg2=""/>
                <then>
                    <basename property="output" file="@{url}"/>
                </then>
                <else>
                    <property name="output" value="@{output}"/>
                </else>
            </if>
            <download url="@{url}" dir="${downloads.dir}" output="${output}">
                <args/>
            </download>
            <unzip src="${downloads.dir}/${output}" dest="@{dir}">
                <cutdirsmapper dirs="1"/>
            </unzip>
        </sequential>
    </macrodef>
    
    <target name="checksum">
        <checksum file="${bin.dir}/aria2/aria2c.exe" algorithm="SHA-512"/>
        <checksum file="${bin.dir}/cmake/bin/cmake.exe" algorithm="SHA-512"/> 
        <checksum file="${bin.dir}/ninja/ninja.exe" algorithm="SHA-512"/>
    </target>
    
    <!--
    ============================================================================
      Aria2
    ============================================================================
    -->
    <target name="aria2.available">
        <available file="${bin.dir}/aria2/aria2c.exe" property="aria2.available"/>
    </target>
    
    <target name="aria2.checksum" depends="aria2.available" if="aria2.available">
        <checksum file="${bin.dir}/aria2/aria2c.exe" algorithm="SHA-512" property="${aria2.SHA-512}" verifyProperty="aria2.installed"/> 
    </target>
    
    <target name="aria2.install" depends="aria2.checksum" unless="aria2.installed">
        <install name="aria2" url="https://github.com/aria2/aria2/releases/download/release-1.34.0/aria2-1.34.0-win-64bit-build1.zip"/>
    </target>
    
    <!--
    ============================================================================
      Cmake
    ============================================================================
    -->
     <target name="cmake.available">
        <available file="${bin.dir}/cmake/bin/cmake.exe" property="cmake.available"/>
    </target>
    
    <target name="cmake.checksum" depends="cmake.available" if="cmake.available">
        <checksum file="${bin.dir}/cmake/bin/cmake.exe" algorithm="SHA-512" property="${cmake.SHA-512}" verifyProperty="cmake.installed"/> 
    </target>
    
    <target name="cmake.install" depends="aria2.install,cmake.checksum" unless="cmake.installed">
        <install name="cmake" url="https://github.com/Kitware/CMake/releases/download/v3.27.6/cmake-3.27.6-windows-x86_64.zip"/>
    </target>
    
    <property name= "cmake.generator.vs2015" value = "Visual Studio 14 2015"/>
    <property name= "cmake.generator.vs2017" value = "Visual Studio 15 2017"/>
    <property name= "cmake.generator.vs2019" value = "Visual Studio 16 2019"/>
    <property name= "cmake.generator.vs2022" value = "Visual Studio 17 2022"/>
    <property name= "cmake.generator.ninja"  value = "Ninja"/>
    <property name= "cmake.architecture"     value ="x64"/>
    <property name= "cmake.platform.vs2015"  value = "-G '${cmake.generator.vs2015}' -A ${cmake.architecture}"/>
    <property name= "cmake.platform.vs2017"  value = "-G '${cmake.generator.vs2017}' -A ${cmake.architecture}"/>
    <property name= "cmake.platform.vs2019"  value = "-G '${cmake.generator.vs2019}' -A ${cmake.architecture}"/>
    <property name= "cmake.platform.vs2022"  value = "-G '${cmake.generator.vs2022}' -A ${cmake.architecture}"/>
    <property name= "cmake.platform.ninja"   value = "-G '${cmake.generator.ninja}'"/>
    
    
    <macrodef name="cmake_exec">
        <attribute name="generator"/>
        <attribute name="project" default= "${ant.project.name}"/>
        <attribute name="configuration" default=""/>
        <attribute name="input"/>
        <attribute name="output" default="${out.dir}/cpp/@{generator}/@{project}/@{configuration}"/>
        <element name="elements" implicit="true" optional="true"/>
        <sequential>
            <mkdir dir="@{output}"/>
            <exec taskname="cmake" executable="${bin.dir}/cmake/bin/cmake.exe" dir="@{output}" failonerror="true">
                <arg line="${cmake.platform.@{generator}}"/>
                <arg value="${cmake.architecture}"/>
                <arg value="-DCMAKE_INSTALL_PREFIX=${out.dir}/cpp/deps"/>
                <arg value="-DVCPKG_ROOT=${vcpkg.dir}"/>
                <elements/>
                <arg value="@{input}"/>
            </exec>
        </sequential>
    </macrodef>
    
    <macrodef name="ctest_exec">
        <attribute name="dir"/>
        <sequential>
            <property environment="env"/>
            <condition property="cores.count" value="${env.NUMBER_OF_PROCESSORS}" else="4">
                <os family="windows" />
            </condition>
            <exec taskname="tests" executable="${bin.dir}/cmake/bin/ctest.exe" dir="@{dir}" failonerror="true">
                <arg value="."/>
                <arg value="--parallel"/>
                <arg value="${cores.count}"/>
                <arg value="--output-on-failure"/>
                <arg line="--tests-regex .*"/>
            </exec>
        </sequential>
    </macrodef>
    
    <!--
    ============================================================================
      Ninja
    ============================================================================
    -->
    <target name="ninja.available">
        <available file="${bin.dir}/ninja/ninja.exe" property="ninja.available"/>
    </target>
    
    <target name="ninja.checksum" depends="ninja.available" if="ninja.available">
        <checksum file="${bin.dir}/ninja/ninja.exe" algorithm="SHA-512" property="${ninja.SHA-512}" verifyProperty="ninja.installed"/> 
    </target>
  
    <target name="ninja.install" depends="aria2.install,ninja.checksum" unless="ninja.installed">
        <install name="ninja" url="https://github.com/ninja-build/ninja/releases/download/v1.8.2/ninja-win.zip"/>
    </target>
    
    <macrodef name="ninja_exec">
        <attribute name="dir"/>
        <attribute name="target" default="all"/>
        <sequential>
            <property environment="env"/>
            <condition property="cores.count" value="${env.NUMBER_OF_PROCESSORS}" else="4">
                <os family="windows" />
            </condition>
            <exec taskname="build" executable="${bin.dir}/ninja/ninja.exe" dir="@{dir}" failonerror="true">
                <arg line="@{target}"/>
                <arg value="-j"/>
                <arg value="${cores.count}"/>
            </exec>
        </sequential>
    </macrodef>
    
    <!--
    ============================================================================
      VcPkg
    ============================================================================
    -->
    <target name="vcpkg.available">
        <available file="${vcpkg.dir}/.vcpkg-root" property="vcpkg.available"/>
    </target>
    
    <target name="vcpkg.install" depends="vcpkg.available" unless="vcpkg.available">
        <install name="vcpkg" dir="${vcpkg.dir}" url="https://github.com/SokaDance/vcpkg/archive/turtle.zip" output="vcpkg-turtle.zip"/>
        <!-- build -->
        <exec taskname="vcpkg-build" executable="cmd" dir="${vcpkg.dir}" failonerror="true">
            <arg value="/C"/>
            <arg value="bootstrap-vcpkg.bat"/>
        </exec>
        <!-- install -->
        <exec taskname="vcpkg-install" executable="${vcpkg.dir}/vcpkg.exe" dir="${vcpkg.dir}" failonerror="true">
            <arg value="--triplet"/>
            <arg value="x64-windows"/>
            <arg value="--vcpkg-root"/>
            <arg value="${vcpkg.dir}"/>
            <arg value="install"/>
            <arg value="boost-test"/>
            <arg value="boost-regex"/>
            <arg value="date"/>
            <arg value="turtle"/>
            <arg value="xerces-c"/>
        </exec>
    </target>
    
    <target name="tools.install" depends="aria2.install
                                         ,cmake.install
                                         ,ninja.install"/>
    
    <target name="configure" depends="tools.install,vcpkg.install"/>
    
    <macrodef name="docker_run">
        <attribute name="name"/>
        <attribute name="image"/>
        <element name="volumes"/>
        <attribute name="workdir"/>
        <element name="command"/>
        <sequential>
            <exec taskname="@{name}" executable="docker.exe" dir="." failonerror="true">
                <arg value="run"/>
                <arg value="--rm"/>
                <volumes/>
                <arg value="-w=@{workdir}"/>
                <arg value="@{image}"/>
                <command/>
            </exec>
        </sequential>
    </macrodef>
    
    <!--
    ============================================================================
      Ecore CPP
    ============================================================================
    -->
    <target name="ecore.version">
        <replaceregexp match="project\(([^ ]*) VERSION [^ ]*" replace="project\(\1 VERSION ${ecore.version}">
            <fileset dir="${root.dir}/ecore" includes="**/CMakeLists.txt"/>
        </replaceregexp>
    </target>
    
    <target name="ecore.generate">
        <local name="models.dir"/>
        <property name="models.dir" location="../models"/>
        <exec executable="docker.exe" dir="." failonerror="true">
            <arg line="run --rm -v '${root.dir}:/pwd' -v '${models.dir}:/models' -w /pwd masagroup/soft.generator.cpp -m /models/ecore.ecore -o /pwd -P /pwd/generator.properties -t !generateLibraryCMakeProject -t !generateTestsCMakeProject"/>
        </exec>
    </target>
    
    <target name="ecore.configure.vs2015">
        <cmake_exec generator="vs2015" project="ecore" input="${root.dir}/ecore"/>
    </target>
    
    <target name="ecore.configure.vs2017">
        <cmake_exec generator="vs2017" project="ecore" input="${root.dir}/ecore"/>
    </target>
    
    <target name="ecore.configure.vs2019">
        <cmake_exec generator="vs2019" project="ecore" input="${root.dir}/ecore"/>
    </target>
    
    <target name="ecore.configure.vs2022">
        <cmake_exec generator="vs2022" project="ecore" input="${root.dir}/ecore"/>
    </target>
    
    <target name="ecore.configure.ninja.release">
        <cmake_exec generator="ninja" project="ecore" configuration="release" input="${root.dir}/ecore">
            <arg value="-DCMAKE_MAKE_PROGRAM=${bin.dir}/ninja/ninja.exe"/>
            <arg value="-DCMAKE_BUILD_TYPE=RelWithDebInfo"/>
        </cmake_exec>
    </target>
    
    <target name="ecore.configure.ninja.debug">
        <cmake_exec generator="ninja" project="ecore" configuration="debug" input="${root.dir}/ecore">
            <arg value="-DCMAKE_MAKE_PROGRAM=${bin.dir}/ninja/ninja.exe"/>
            <arg value="-DCMAKE_BUILD_TYPE=Debug"/>
        </cmake_exec>
    </target>
    
    <target name="ecore.configure.ninja" depends="ecore.configure.ninja.release,ecore.configure.ninja.debug"/>
    
    <target name="ecore.configure" depends="ecore.configure.vs2022,ecore.configure.ninja"/>
    
    <target name="ecore.build.debug">
        <ninja_exec dir="${out.dir}/cpp/ninja/ecore/debug"/>
    </target>
    
    <target name="ecore.build.release">
        <ninja_exec dir="${out.dir}/cpp/ninja/ecore/release"/>
    </target>
    
    <target name="ecore.build" depends="ecore.build.debug,ecore.build.release"/>
    
    <target name="ecore.tests.debug">
        <ctest_exec dir="${out.dir}/cpp/ninja/ecore/debug"/>
    </target>
    
    <target name="ecore.tests.release">
        <ctest_exec dir="${out.dir}/cpp/ninja/ecore/release"/>
    </target>
    
    <target name="ecore.tests" depends="ecore.tests.debug,ecore.tests.release"/>
    
    <target name="ecore.install">
        <ninja_exec dir="${out.dir}/cpp/ninja/ecore/release" target="install"/>
        <ninja_exec dir="${out.dir}/cpp/ninja/ecore/debug" target="install"/>
    </target>
    
    <target name="ecore.package">
        <ninja_exec dir="${out.dir}/cpp/ninja/ecore/release" target="package"/>
        <ninja_exec dir="${out.dir}/cpp/ninja/ecore/debug" target="package"/>
    </target>
    
    <target name="ecore.dist">
        <zip destfile="${dist.dir}/ecore-${ecore.version}-win64.zip">
            <zipgroupfileset dir="${out.dir}/cpp/ninja/ecore/debug" includes="*.zip"/>
            <zipgroupfileset dir="${out.dir}/cpp/ninja/ecore/release" includes="*.zip"/>
        </zip>
    </target>
    
    <target name="ecore" depends="ecore.version,ecore.generate,ecore.configure,ecore.build,ecore.tests,ecore.install,ecore.package,ecore.dist"/>
    
    <!--
    ============================================================================
      Library CPP
    ============================================================================
    -->
    <target name="library.generate">
        <local name="models.dir"/>
        <property name="models.dir" location="../models"/>
        <exec executable="docker.exe" dir="." failonerror="true">
            <arg line="run --rm -v '${root.dir}:/pwd' -v '${models.dir}:/models' -w /pwd masagroup/soft.generator.cpp -m /models/library.ecore -o /pwd -P /pwd/generator.properties"/>
        </exec>
    </target>
    
    <target name="library.configure.vs2019">
        <cmake_exec generator="vs2019" project="library" input="${root.dir}/library"/>
    </target>
    
    <target name="library.configure.vs2022">
        <cmake_exec generator="vs2022" project="library" input="${root.dir}/library"/>
    </target>
    
    <target name="library.configure.ninja.release">
        <cmake_exec generator="ninja" project="library" configuration="release" input="${root.dir}/library">
            <arg value="-DCMAKE_MAKE_PROGRAM=${bin.dir}/ninja/ninja.exe"/>
            <arg value="-DCMAKE_BUILD_TYPE=RelWithDebInfo"/>
        </cmake_exec>
    </target>
    
    <target name="library.configure.ninja.debug">
        <cmake_exec generator="ninja" project="library" configuration="debug" input="${root.dir}/library">
            <arg value="-DCMAKE_MAKE_PROGRAM=${bin.dir}/ninja/ninja.exe"/>
            <arg value="-DCMAKE_BUILD_TYPE=Debug"/>
        </cmake_exec>
    </target>
    
    <target name="library.configure.ninja" depends="library.configure.ninja.release,library.configure.ninja.debug"/>
    
    <target name="library.configure" depends="library.configure.vs2022,library.configure.ninja"/>
    
    <target name="library.build.debug">
        <ninja_exec dir="${out.dir}/cpp/ninja/library/debug"/>
    </target>
    
    <target name="library.build.release">
        <ninja_exec dir="${out.dir}/cpp/ninja/library/release"/>
    </target>
    
    <target name="library.build" depends="library.build.debug,library.build.release"/>
    
    <target name="library.tests.debug">
        <ctest_exec dir="${out.dir}/cpp/ninja/library/debug"/>
    </target>
    
    <target name="library.tests.release">
        <ctest_exec dir="${out.dir}/cpp/ninja/library/release"/>
    </target>
    
    <target name="library.tests" depends="library.tests.debug,library.tests.release"/>
    
    <target name="library" depends="library.generate,library.configure,library.build,library.tests"/>
    
    <target name="library.clean">
        <exec executable="git" dir="library" failonerror="true">
            <arg line="clean -xfd" />
        </exec>
    </target>

    
    <target name="all" depends="configure,ecore,library"/>
    
    <target name="clean">
        <attrib readonly="false" type="both" verbose="true">
            <dirset dir="out/go">
                <include name="**/*"/>
            </dirset>
        </attrib>
        <exec executable="git" failonerror="true">
            <arg line="clean -xfd" />
        </exec>
    </target>


</project>
